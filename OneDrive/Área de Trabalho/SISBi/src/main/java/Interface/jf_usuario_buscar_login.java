/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;
import ConexaoBanco.Conexao;
import Model.Usuario;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author João Marcos
 */
public class jf_usuario_buscar_login extends javax.swing.JInternalFrame {

    /**
     * Creates new form JanelaEscola
     */
    private Conexao conexao;
    String cpf_pesquisa;
    
    public jf_usuario_buscar_login() {
        
        this.conexao = new Conexao();
        
        initComponents();
        
         //inicializa a tela com os campos vazios e desabilitados
        atualizaTabela(conexao); //
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelJanelaEscola = new javax.swing.JPanel();
        painelTabela = new javax.swing.JScrollPane();
        painelTabela = new javax.swing.JScrollPane();
        tabelaUsuario = new javax.swing.JTable();
        lb_nome_usuario_cad = new javax.swing.JLabel();
        atualizar = new javax.swing.JButton();
        txt_isbn_pesquisa_livro = new javax.swing.JTextField();
        txt_nome_pesquisa_usuario = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Buscar por cpf");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        tabelaUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome","Cpf" , "Nascimento", "Endereco","Numero", "Cidade" ,"Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        painelTabela.setViewportView(tabelaUsuario);

        lb_nome_usuario_cad.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        lb_nome_usuario_cad.setText("Usuarios por login");

        atualizar.setBackground(new java.awt.Color(51, 102, 255));
        atualizar.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        atualizar.setForeground(new java.awt.Color(255, 255, 255));
        atualizar.setText("BUSCAR");
        atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarActionPerformed(evt);
            }
        });

        txt_isbn_pesquisa_livro.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        txt_isbn_pesquisa_livro.setPreferredSize(new java.awt.Dimension(140, 25));

        txt_nome_pesquisa_usuario.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        txt_nome_pesquisa_usuario.setPreferredSize(new java.awt.Dimension(140, 25));

        javax.swing.GroupLayout painelJanelaEscolaLayout = new javax.swing.GroupLayout(painelJanelaEscola);
        painelJanelaEscola.setLayout(painelJanelaEscolaLayout);
        painelJanelaEscolaLayout.setHorizontalGroup(
            painelJanelaEscolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelJanelaEscolaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelJanelaEscolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_nome_usuario_cad)
                    .addGroup(painelJanelaEscolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(atualizar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_nome_pesquisa_usuario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(painelTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(painelJanelaEscolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelJanelaEscolaLayout.createSequentialGroup()
                    .addGap(419, 419, 419)
                    .addComponent(txt_isbn_pesquisa_livro, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(420, Short.MAX_VALUE)))
        );
        painelJanelaEscolaLayout.setVerticalGroup(
            painelJanelaEscolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelJanelaEscolaLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(painelJanelaEscolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelJanelaEscolaLayout.createSequentialGroup()
                        .addComponent(lb_nome_usuario_cad, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(txt_nome_pesquisa_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(painelTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(painelJanelaEscolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelJanelaEscolaLayout.createSequentialGroup()
                    .addGap(201, 201, 201)
                    .addComponent(txt_isbn_pesquisa_livro, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(201, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelJanelaEscola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(painelJanelaEscola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(60, 60, 60))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        //Anula a janelaEscola
        
        this.dispose();
    }//GEN-LAST:event_formInternalFrameClosing

    private void atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarActionPerformed
        // TODO add your handling code here:
        cpf_pesquisa=txt_nome_pesquisa_usuario.getText();
        atualizaTabela(conexao);
    }//GEN-LAST:event_atualizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton atualizar;
    private javax.swing.JLabel lb_nome_usuario_cad;
    private javax.swing.JPanel painelJanelaEscola;
    private javax.swing.JScrollPane painelTabela;
    private javax.swing.JTable tabelaUsuario;
    private javax.swing.JTextField txt_isbn_pesquisa_livro;
    private javax.swing.JTextField txt_nome_pesquisa_usuario;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para reescrever todas as linhas da tabela
     * @param 
     */
    private void atualizaTabela(Conexao usuario_dao)
    {
        
        try
        {
            
            
            limparTabela();
            
            ArrayList<Usuario> listaUsuario;
            listaUsuario = consultar(); //consulta todos os registros da tabela Escola
          
            //Resgata o modelo da tabela            
            DefaultTableModel modeloTabela = (DefaultTableModel) tabelaUsuario.getModel();

            for(Usuario user : listaUsuario)
            {
                //adiciona em cada linha da tabela da tela o conteúdo de cada posição da listaEscolas
                modeloTabela.addRow(new String[]{user.getNome(),user.getCpf(),Integer.toString(user.getNumero()),user.getEndereco(),user.getCidade(),
                user.getEstado()});
            }
            
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
        }
    }
    public ArrayList<Usuario> consultar() {
        
        ArrayList<Usuario> lista = new ArrayList<Usuario>();
        String sql = "select * from usuario where cpf like'%"+cpf_pesquisa+"%'";
        
        conexao.conectar();
        
        try
        { 
            if(this.conexao.conectar())
            {  
                
                PreparedStatement sentenca = this.conexao.getConnection().prepareStatement(sql);
                
                //recebe o resultado da consulta
                ResultSet resultado = sentenca.executeQuery();
                  
                //percorrer cada linha do resultado
                while(resultado.next()) 
                {
                    //resgata o valor de cada linha, selecionando pelo nome de cada coluna da tabela Escola
                   Usuario user = new Usuario();
                    user.setNome(resultado.getString("Nome"));
                    user.setCpf(resultado.getString("Cpf"));
                    user.setNascimento(resultado.getString("Nascimento"));
                    user.setEndereco(resultado.getString("Endereco"));
                    user.setNumero(resultado.getInt("Numero"));
                    user.setCidade(resultado.getString("Cidade"));
                    user.setEstado(resultado.getString("Estado"));
                                        
                   
                    //adiciona cada tupla na listaEscolas que será retornada para a janela Escola
                  lista.add(user);
                }
                    
                sentenca.close();
                this.conexao.getConnection().close();
                
            }
            
            return lista;
        }
        catch(SQLException ex)
        {
           throw new RuntimeException(ex);
        }
 
    
    }
        
    /**
     * Método para percorrer cada linha da tabela e realizar a exclusão
     */
    private void limparTabela()
    {
        //percorre a tabela e exclui todas as linhas
        while(tabelaUsuario.getRowCount() > 0) 
        {
            DefaultTableModel dm = (DefaultTableModel) tabelaUsuario.getModel();
            dm.getDataVector().removeAllElements();
            
        }
    }
            
}
